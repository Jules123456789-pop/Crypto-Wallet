type DepositPayload = record { user_id : nat64; amount : nat64 };
type Message = variant {
  Error : text;
  DuplicateEmail : text;
  InvalidPayload : text;
  InsufficientBalance : text;
  NotFound : text;
  Success : text;
  Unauthorized : text;
  InternalError : text;
  InsufficientPoints : text;
};
type PointsPayload = record { user_id : nat64; points : nat64 };
type Result = variant { Ok : User; Err : Message };
type Result_1 = variant { Ok : Message; Err : Message };
type Result_2 = variant { Ok : vec Transaction; Err : Message };
type Result_3 = variant { Ok : nat64; Err : Message };
type Result_4 = variant { Ok : Transaction; Err : Message };
type Transaction = record {
  id : nat64;
  to_user_id : nat64;
  created_at : nat64;
  from_user_id : nat64;
  amount : nat64;
};
type TransactionPayload = record {
  to_user_id : nat64;
  from_user_id : nat64;
  amount : nat64;
};
type User = record {
  id : nat64;
  username : text;
  balance : nat64;
  created_at : nat64;
  email : text;
  first_name : text;
  last_name : text;
  phone_number : text;
  points : nat64;
};
type UserPayload = record {
  email : text;
  first_name : text;
  last_name : text;
  phone_number : text;
};
service : {
  create_user : (UserPayload) -> (Result);
  delete_user : (nat64) -> (Result_1);
  deposit_funds : (DepositPayload) -> (Result_1);
  get_transaction_history : (nat64) -> (Result_2) query;
  get_user_balance : (nat64) -> (Result_3) query;
  get_user_points : (nat64) -> (Result_3) query;
  list_all_transactions : () -> (vec Transaction) query;
  list_all_users : () -> (vec User) query;
  redeem_points : (PointsPayload) -> (Result_1);
  search_user_by_email : (text) -> (Result) query;
  search_user_by_phone : (text) -> (Result) query;
  send_transaction : (TransactionPayload) -> (Result_4);
  update_user : (nat64, UserPayload) -> (Result);
}
